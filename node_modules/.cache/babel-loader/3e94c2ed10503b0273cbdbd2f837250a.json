{"remainingRequest":"/home/sp/Documents/Vue3Firebase/serhii-blog2/node_modules/babel-loader/lib/index.js!/home/sp/Documents/Vue3Firebase/serhii-blog2/src/composables/getPosts.js","dependencies":[{"path":"/home/sp/Documents/Vue3Firebase/serhii-blog2/src/composables/getPosts.js","mtime":1643892059776},{"path":"/home/sp/Documents/Vue3Firebase/serhii-blog2/babel.config.js","mtime":1643785385798},{"path":"/home/sp/Documents/Vue3Firebase/serhii-blog2/node_modules/cache-loader/dist/cjs.js","mtime":1643785380808},{"path":"/home/sp/Documents/Vue3Firebase/serhii-blog2/node_modules/babel-loader/lib/index.js","mtime":1643785381678}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3NwL0RvY3VtZW50cy9WdWUzRmlyZWJhc2Uvc2VyaGlpLWJsb2cyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiOwppbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnOwoKdmFyIGdldFBvc3RzID0gZnVuY3Rpb24gZ2V0UG9zdHMoKSB7CiAgdmFyIHBvc3RzID0gcmVmKFtdKTsKICB2YXIgZXJyb3IgPSByZWYobnVsbCk7CgogIHZhciBsb2FkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgZGF0YTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL3Bvc3RzJyk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmIChkYXRhLm9rKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ25vIGRhdGEgYXZhbGlhYmxlJyk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuanNvbigpOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIHBvc3RzLnZhbHVlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMTsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gX2NvbnRleHQudDAubWVzc2FnZTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci52YWx1ZSk7CgogICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDExXV0pOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBsb2FkKCkgewogICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHJldHVybiB7CiAgICBwb3N0czogcG9zdHMsCiAgICBlcnJvcjogZXJyb3IsCiAgICBsb2FkOiBsb2FkCiAgfTsKfTsKCmV4cG9ydCBkZWZhdWx0IGdldFBvc3RzOw=="},{"version":3,"sources":["/home/sp/Documents/Vue3Firebase/serhii-blog2/src/composables/getPosts.js"],"names":["ref","getPosts","posts","error","load","fetch","data","ok","Error","json","value","message","console","log"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,KAApB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,MAAMC,KAAK,GAAGF,GAAG,CAAC,EAAD,CAAjB;AACA,MAAMG,KAAK,GAAGH,GAAG,CAAC,IAAD,CAAjB;;AAEA,MAAMI,IAAI;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMQC,KAAK,CAAC,6BAAD,CANb;;AAAA;AAMLC,cAAAA,IANK;;AAAA,kBAOJA,IAAI,CAACC,EAPD;AAAA;AAAA;AAAA;;AAAA,oBAQDC,KAAK,CAAC,mBAAD,CARJ;;AAAA;AAAA;AAAA,qBAUWF,IAAI,CAACG,IAAL,EAVX;;AAAA;AAUTP,cAAAA,KAAK,CAACQ,KAVG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYTP,cAAAA,KAAK,CAACO,KAAN,GAAc,YAAIC,OAAlB;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACO,KAAlB;;AAbS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJN,IAAI;AAAA;AAAA;AAAA,KAAV;;AAgBA,SAAO;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,KAAK,EAALA,KAAT;AAAgBC,IAAAA,IAAI,EAAJA;AAAhB,GAAP;AACD,CArBD;;AAsBA,eAAeH,QAAf","sourcesContent":["import { ref } from 'vue';\n\nconst getPosts = () => {\n  const posts = ref([]);\n  const error = ref(null);\n\n  const load = async () => {\n    try {\n      //simulate delay\n      // await new Promise((resolve) => {\n      //   setTimeout(resolve, 2000);\n      // });\n      let data = await fetch('http://localhost:3000/posts');\n      if (!data.ok) {\n        throw Error('no data avaliable');\n      }\n      posts.value = await data.json();\n    } catch (err) {\n      error.value = err.message;\n      console.log(error.value);\n    }\n  };\n  return { posts, error, load };\n};\nexport default getPosts;\n"]}]}